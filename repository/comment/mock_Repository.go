// Code generated by mockery v2.9.4. DO NOT EDIT.

package comment

import (
	pagination "go-boilerplate/common/pagination"
	"go-boilerplate/domain/comment"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: tx, q
func (_m *MockRepository) Count(tx *sql.Tx, q Query) (int, error) {
	ret := _m.Called(tx, q)

	var r0 int
	if rf, ok := ret.Get(0).(func(*sql.Tx, Query) int); ok {
		r0 = rf(tx, q)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.Tx, Query) error); ok {
		r1 = rf(tx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ID
func (_m *MockRepository) Delete(tx *sql.Tx, ID int) error {
	ret := _m.Called(tx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int) error); ok {
		r0 = rf(tx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: tx, q, p
func (_m *MockRepository) Find(tx *sql.Tx, q Query, p pagination.Pagination) ([]comment.Comment, error) {
	ret := _m.Called(tx, q, p)

	var r0 []comment.Comment
	if rf, ok := ret.Get(0).(func(*sql.Tx, Query, pagination.Pagination) []comment.Comment); ok {
		r0 = rf(tx, q, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comment.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.Tx, Query, pagination.Pagination) error); ok {
		r1 = rf(tx, q, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: tx, ID
func (_m *MockRepository) FindByID(tx *sql.Tx, ID int) (comment.Comment, error) {
	ret := _m.Called(tx, ID)

	var r0 comment.Comment
	if rf, ok := ret.Get(0).(func(*sql.Tx, int) comment.Comment); ok {
		r0 = rf(tx, ID)
	} else {
		r0 = ret.Get(0).(comment.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.Tx, int) error); ok {
		r1 = rf(tx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: tx, cmt
func (_m *MockRepository) Insert(tx *sql.Tx, cmt comment.Comment) (int, error) {
	ret := _m.Called(tx, cmt)

	var r0 int
	if rf, ok := ret.Get(0).(func(*sql.Tx, comment.Comment) int); ok {
		r0 = rf(tx, cmt)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.Tx, comment.Comment) error); ok {
		r1 = rf(tx, cmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tx, cmt
func (_m *MockRepository) Update(tx *sql.Tx, cmt comment.Comment) error {
	ret := _m.Called(tx, cmt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, comment.Comment) error); ok {
		r0 = rf(tx, cmt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
